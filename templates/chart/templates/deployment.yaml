{{- /*
The main Deployment Controller for the application being deployed. This resource manages the creation and replacement
of the Pods backing your application.
*/ -}}
{{- /*
We must decide whether or not there are volumes to inject. The logic to decide whether or not to inject is based on
whether or not there are configMaps OR secrets that are specified as volume mounts (`as: volume` attributes). We do this
by using a map to track whether or not we have seen a volume type. We have to use a map because we can't update a
variable in helm chart templates.

Similarly, we need to decide whether or not there are environment variables to add

We need this because certain sections are omitted if there are no volumes or environment variables to add.
*/ -}}
{{/* Go Templates do not support variable updating, so we simulate it using dictionaries */}}
{{- $hasInjectionTypes := dict "hasVolume" false "hasEnvVars" false "hasIRSA" false "exposePorts" false -}}
{{- if .Values.envVars -}}
  {{- $_ := set $hasInjectionTypes "hasEnvVars" true -}}
{{- end -}}
{{- if .Values.additionalContainerEnv -}}
  {{- $_ := set $hasInjectionTypes "hasEnvVars" true -}}
{{- end -}}
{{- if gt (len .Values.aws.irsa.role_arn) 0 -}}
  {{- $_ := set $hasInjectionTypes "hasEnvVars" true -}}
  {{- $_ := set $hasInjectionTypes "hasVolume" true -}}
  {{- $_ := set $hasInjectionTypes "hasIRSA" true -}}
{{- end -}}
{{- $allSecrets := values .Values.secrets -}}
{{- range $allSecrets -}}
  {{- if eq (index . "as") "volume" -}}
    {{- $_ := set $hasInjectionTypes "hasVolume" true -}}
  {{- else if eq (index . "as") "environment" -}}
    {{- $_ := set $hasInjectionTypes "hasEnvVars" true -}}
  {{- else if eq (index . "as") "none" -}}
    {{- /* noop */ -}}
  {{- else -}}
    {{- fail printf "secrets config has unknown type: %s" (index . "as") -}}
  {{- end -}}
{{- end -}}
{{- $allConfigMaps := values .Values.configMaps -}}
{{- range $allConfigMaps -}}
  {{- if eq (index . "as") "volume" -}}
    {{- $_ := set $hasInjectionTypes "hasVolume" true -}}
  {{- else if eq (index . "as") "environment" -}}
    {{- $_ := set $hasInjectionTypes "hasEnvVars" true -}}
  {{- else if eq (index . "as") "none" -}}
    {{- /* noop */ -}}
  {{- else -}}
    {{- fail printf "configMaps config has unknown type: %s" (index . "as") -}}
  {{- end -}}
{{- end -}}
{{- if gt (len .Values.persistentVolumes) 0 -}}
  {{- $_ := set $hasInjectionTypes "hasVolume" true -}}
{{- end -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include ".fullname" . }}
  labels:
    # These labels are required by helm. You can read more about required labels in the chart best practices guide:
    # https://docs.helm.sh/chart_best_practices/#standard-labels
    helm.sh/chart: {{ include ".chart" . }}
    app.kubernetes.io/name: {{ include ".name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    {{- range $key, $value := .Values.additionalDeploymentLabels }}
    {{ $key }}: {{ $value }}
    {{- end}}
{{- with .Values.deploymentAnnotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include ".name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      gruntwork.io/deployment-type: main
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include ".name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        gruntwork.io/deployment-type: main
        {{- range $key, $value := .Values.additionalPodLabels }}
        {{ $key }}: {{ $value }}
        {{- end }}
      {{- with .Values.podAnnotations }}
      annotations:
{{ toYaml . | indent 8 }}
      {{- end }}
    spec:
      {{- if gt (len .Values.serviceAccount.name) 0 }}
      serviceAccountName: "{{ .Values.serviceAccount.name }}"
      {{- end }}
      {{- if hasKey .Values.serviceAccount "automountServiceAccountToken" }}
      automountServiceAccountToken : {{ .Values.serviceAccount.automountServiceAccountToken }}
      {{- end }}
      {{- if .Values.podSecurityContext }}
      securityContext:
{{ toYaml .Values.podSecurityContext | indent 8 }}
      {{- end}}
      containers:
        {{- if gt (int .Values.containerCount) 1 }}
        {{- with .Values.containers }}
        {{- toYaml . | nindent 8 }}
        {{- end}}
        {{- else }}
        - name: {{ .Values.applicationName }}
          {{- $repo := required "image.repository is required" .Values.image.repository }}
          {{- $tag := required "image.tag is required" .Values.image.tag }}
          image: "{{ $repo }}:{{ $tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
          {{- if .Values.containerCommand }}
          command:
{{ toYaml .Values.containerCommand | indent 12 }}
          {{- end }}

          {{- if index $hasInjectionTypes "exposePorts" }}
          ports:
            {{- range $key, $portSpec := .Values.containerPorts }}
            {{- if not $portSpec.disabled }}
            - name: {{ $key | quote }}
              containerPort: {{ int $portSpec.containerPort }}
              protocol: {{ $portSpec.protocol }}
            {{- end }}
            {{- end }}
          {{- end }}

          {{- if .Values.livenessProbe }}
          livenessProbe:
{{ toYaml .Values.livenessProbe | indent 12 }}
          {{- end }}

          {{- if .Values.readinessProbe }}
          readinessProbe:
{{ toYaml .Values.readinessProbe | indent 12 }}
          {{- end }}
          {{- if .Values.securityContext }}
          securityContext:
{{ toYaml .Values.securityContext | indent 12 }}
          {{- end}}
          resources:
{{ toYaml .Values.containerResources | indent 12 }}
          env:
          {{- if index $hasInjectionTypes "hasIRSA" }}
            - name: AWS_ROLE_ARN
              value: "{{ .Values.aws.irsa.role_arn }}"
            - name: AWS_WEB_IDENTITY_TOKEN_FILE
              value: /var/run/secrets/eks.amazonaws.com/serviceaccount/token
          {{- end }}
          {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: {{ quote $value }}
          {{- end }}
          {{- if .Values.additionalContainerEnv }}
{{ toYaml .Values.additionalContainerEnv | indent 12 }}
          {{- end }}
          {{- range $name, $value := .Values.configMaps }}
            {{- if eq $value.as "environment" }}
            {{- range $configKey, $keyEnvVarConfig := $value.items }}
            - name: {{ required "envVarName is required on configMaps items when using environment" $keyEnvVarConfig.envVarName | quote }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $name }}
                  key: {{ $configKey }}
            {{- end }}
            {{- end }}
          {{- end }}
          {{- range $name, $value := .Values.secrets }}
            {{- if eq $value.as "environment" }}
            {{- range $secretKey, $keyEnvVarConfig := $value.items }}
            - name: {{ required "envVarName is required on secrets items when using environment" $keyEnvVarConfig.envVarName | quote }}
              valueFrom:
                secretKeyRef:
                  name: {{ $name }}
                  key: {{ $secretKey }}
            {{- end }}
            {{- end }}
          {{- end }}

          {{- /* START VOLUME MOUNT LOGIC */ -}}
          {{- if index $hasInjectionTypes "hasVolume" }}
          volumeMounts:
          {{- end }}
          {{- if index $hasInjectionTypes "hasIRSA" }}
            - name: aws-iam-token
              mountPath: /var/run/secrets/eks.amazonaws.com/serviceaccount
              readOnly: true
          {{- end }}
          {{- range $name, $value := .Values.configMaps }}
            {{- if eq $value.as "volume" }}
            - name: {{ $name }}-volume
              mountPath: {{ quote $value.mountPath }}
            {{- end }}
          {{- end }}
          {{- range $name, $value := .Values.secrets }}
            {{- if eq $value.as "volume" }}
            - name: {{ $name }}-volume
              mountPath: {{ quote $value.mountPath }}
            {{- end }}
          {{- end }}
          {{- range $name, $value := .Values.persistentVolumes }}
            - name: {{ $name }}
              mountPath: {{ quote $value.mountPath }}
          {{- end }}
          {{- /* END VOLUME MOUNT LOGIC */ -}}


          {{- if gt (int .Values.shutdownDelay) 0 }}
          lifecycle:
{{ toYaml .Values.lifecycle | indent 12 }}
          {{- end }}

          {{- /* end containers */ -}}
          {{- end }}

        {{- range $key, $value := .Values.sideCarContainers }}
        - name: {{ $key }}
{{ toYaml $value | indent 10 }}
        {{- end }}

    {{- /* START IMAGE PULL SECRETS LOGIC */ -}}
    {{- if gt (len .Values.imagePullSecrets) 0 }}
      imagePullSecrets:
        {{- range $secretName := .Values.imagePullSecrets }}
        - name: {{ $secretName }}
        {{- end }}
    {{- end }}
    {{- /* END IMAGE PULL SECRETS LOGIC */ -}}

    {{- /* START VOLUME LOGIC */ -}}
    {{- if index $hasInjectionTypes "hasVolume" }}
      volumes:
    {{- end }}
    {{- if index $hasInjectionTypes "hasIRSA" }}
        - name: aws-iam-token
          projected:
            defaultMode: 420
            sources:
              - serviceAccountToken:
                  audience: sts.amazonaws.com
                  expirationSeconds: 86400
                  path: token
    {{- end }}
    {{- range $name, $value := .Values.configMaps }}
      {{- if eq $value.as "volume" }}
        - name: {{ $name }}-volume
          configMap:
            name: {{ $name }}
            {{- if $value.items }}
            items:
              {{- range $configKey, $keyMountConfig := $value.items }}
              - key: {{ $configKey }}
                path: {{ required "filePath is required for configMap items" $keyMountConfig.filePath | quote }}
                {{- if $keyMountConfig.fileMode }}
                mode: {{ include ".fileModeOctalToDecimal" $keyMountConfig.fileMode }}
                {{- end }}
              {{- end }}
            {{- end }}
      {{- end }}
    {{- end }}
    {{- range $name, $value := .Values.secrets }}
      {{- if eq $value.as "volume" }}
        - name: {{ $name }}-volume
          secret:
            secretName: {{ $name }}
            {{- if $value.items }}
            items:
              {{- range $secretKey, $keyMountConfig := $value.items }}
              - key: {{ $secretKey }}
                path: {{ required "filePath is required for secrets items" $keyMountConfig.filePath | quote }}
                {{- if $keyMountConfig.fileMode }}
                mode: {{ include ".fileModeOctalToDecimal" $keyMountConfig.fileMode }}
                {{- end }}
              {{- end }}
            {{- end }}
      {{- end }}
    {{- end }}
    {{- range $name, $value := .Values.persistentVolumes }}
        - name: {{ $name }}
          persistentVolumeClaim:
            claimName: {{ $value.claimName }}
    {{- end }}
    {{- /* END VOLUME LOGIC */ -}}

    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}

    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}

    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}

...









